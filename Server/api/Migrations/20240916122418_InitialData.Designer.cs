// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240916122418_InitialData")]
    partial class InitialData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Certificate", b =>
                {
                    b.Property<Guid>("CertificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CertificateCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CertificateId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Certificates");

                    b.HasData(
                        new
                        {
                            CertificateId = new Guid("d76b8c60-2f4d-4b77-8f6d-ed2a5ab7c345"),
                            CertificateCode = "CERT12345",
                            CourseId = new Guid("a56d8b60-2f4d-4b77-8f6d-bd2a5ab7c345"),
                            IssuedDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = new Guid("e8e8cfcf-349d-4d7e-9f30-c0f0badd55ab")
                        },
                        new
                        {
                            CertificateId = new Guid("e86b8c60-2f4d-4b77-8f6d-ed2a5ab7c345"),
                            CertificateCode = "CERT67890",
                            CourseId = new Guid("b65d8b60-2f4d-4b77-8f6d-cd2a5ab7c345"),
                            IssuedDate = new DateTime(2024, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = new Guid("d9d8cfcf-459d-4d7e-8f21-c0f0badd77cb")
                        });
                });

            modelBuilder.Entity("Entities.Course", b =>
                {
                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InstructorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId");

                    b.HasIndex("InstructorId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseId = new Guid("a56d8b60-2f4d-4b77-8f6d-bd2a5ab7c345"),
                            Credits = 3,
                            Description = "An introductory course on programming basics.",
                            InstructorId = new Guid("8d6a9f34-1f6b-4f1b-bb20-38b75f56d9d5"),
                            Title = "Fundamentals of Programming"
                        },
                        new
                        {
                            CourseId = new Guid("b65d8b60-2f4d-4b77-8f6d-cd2a5ab7c345"),
                            Credits = 4,
                            Description = "An advanced course covering database management systems.",
                            InstructorId = new Guid("8d6a9f34-1f6b-4f1b-bb20-38b75f56d9d5"),
                            Title = "Advanced Database Systems"
                        });
                });

            modelBuilder.Entity("Entities.Instructor", b =>
                {
                    b.Property<Guid>("InstructorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InstructorId");

                    b.ToTable("Instructors");

                    b.HasData(
                        new
                        {
                            InstructorId = new Guid("8d6a9f34-1f6b-4f1b-bb20-38b75f56d9d5"),
                            Email = "michael.brown@example.com",
                            FirstName = "Michael",
                            LastName = "Brown"
                        });
                });

            modelBuilder.Entity("Entities.Module", b =>
                {
                    b.Property<Guid>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ModuleId");

                    b.HasIndex("CourseId");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            ModuleId = new Guid("c56b8c60-2f4d-4b77-8f6d-ed2a5ab7c345"),
                            Content = "Basic concepts of C# programming language.",
                            CourseId = new Guid("a56d8b60-2f4d-4b77-8f6d-bd2a5ab7c345"),
                            Title = "Introduction to C#"
                        },
                        new
                        {
                            ModuleId = new Guid("d65b8c60-2f4d-4b77-8f6d-ed2a5ab7c345"),
                            Content = "Fundamentals of database design and normalization.",
                            CourseId = new Guid("b65d8b60-2f4d-4b77-8f6d-cd2a5ab7c345"),
                            Title = "Database Design"
                        });
                });

            modelBuilder.Entity("Entities.Student", b =>
                {
                    b.Property<Guid>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            StudentId = new Guid("e8e8cfcf-349d-4d7e-9f30-c0f0badd55ab"),
                            Email = "alice.johnson@example.com",
                            FirstName = "Alice",
                            LastName = "Johnson"
                        },
                        new
                        {
                            StudentId = new Guid("d9d8cfcf-459d-4d7e-8f21-c0f0badd77cb"),
                            Email = "bob.williams@example.com",
                            FirstName = "Bob",
                            LastName = "Williams"
                        });
                });

            modelBuilder.Entity("Entities.StudentCourse", b =>
                {
                    b.Property<Guid>("StudentCourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StudentCourseId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentCourses");
                });

            modelBuilder.Entity("Entities.Certificate", b =>
                {
                    b.HasOne("Entities.Course", "Course")
                        .WithMany("Certificates")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Entities.Course", b =>
                {
                    b.HasOne("Entities.Instructor", "Instructor")
                        .WithMany("Courses")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Entities.Module", b =>
                {
                    b.HasOne("Entities.Course", "Course")
                        .WithMany("Modules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Entities.StudentCourse", b =>
                {
                    b.HasOne("Entities.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Student", "Student")
                        .WithMany("EnrolledCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Entities.Course", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("Modules");

                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("Entities.Instructor", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Entities.Student", b =>
                {
                    b.Navigation("EnrolledCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
